/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(250);


/***/ }),

/***/ 250:
/***/ (function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar Util = __webpack_require__(252);\nvar Call = __webpack_require__(253);\n\nwindow.WebIM = typeof WebIM !== 'undefined' ? WebIM : {};\nWebIM.WebRTC = WebIM.WebRTC || {};\nWebIM.WebRTC.Call = Call;\nWebIM.WebRTC.Util = Util;\n\nif (( false ? 'undefined' : _typeof(module)) === 'object' && _typeof(module.exports) === 'object') {\n    module.exports = WebIM.WebRTC;\n} else if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n        return WebIM.WebRTC;\n    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n/**\r\n * 判断是否支持pranswer\r\n */\nif (/Chrome/.test(navigator.userAgent)) {\n    WebIM.WebRTC.supportPRAnswer = navigator.userAgent.split(\"Chrome/\")[1].split(\".\")[0] >= 50 ? true : false;\n}\n\n//WebIM.WebRTC.supportPRAnswer = false;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(251)(module)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3dlYnJ0Yy9zcmMvZW50cnkuanM/ZmZlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgVXRpbCA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy91dGlscycpO1xyXG52YXIgQ2FsbCA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9jYWxsJyk7XHJcblxyXG53aW5kb3cuV2ViSU0gPSB0eXBlb2YgV2ViSU0gIT09ICd1bmRlZmluZWQnID8gV2ViSU0gOiB7fTtcclxuV2ViSU0uV2ViUlRDID0gV2ViSU0uV2ViUlRDIHx8IHt9O1xyXG5XZWJJTS5XZWJSVEMuQ2FsbCA9IENhbGw7XHJcbldlYklNLldlYlJUQy5VdGlsID0gVXRpbDtcclxuXHJcbmlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09ICdvYmplY3QnKSB7XHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFdlYklNLldlYlJUQztcclxufSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcclxuICAgIGRlZmluZShbXSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBXZWJJTS5XZWJSVEM7XHJcbiAgICB9KTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiDliKTmlq3mmK/lkKbmlK/mjIFwcmFuc3dlclxyXG4gKi9cclxuaWYgKC9DaHJvbWUvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcclxuICAgIFdlYklNLldlYlJUQy5zdXBwb3J0UFJBbnN3ZXIgPSAobmF2aWdhdG9yLnVzZXJBZ2VudC5zcGxpdChcIkNocm9tZS9cIilbMV0uc3BsaXQoXCIuXCIpWzBdID49IDUwKSA/IHRydWUgOiBmYWxzZTtcclxufVxyXG5cclxuLy9XZWJJTS5XZWJSVEMuc3VwcG9ydFBSQW5zd2VyID0gZmFsc2U7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJydGMvc3JjL2VudHJ5LmpzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7OyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 251:
/***/ (function(module, exports) {

	eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcz9jM2MyIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xyXG5cdFx0bW9kdWxlLnBhdGhzID0gW107XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn1cclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzXG4vLyBtb2R1bGUgaWQgPSAyNTFcbi8vIG1vZHVsZSBjaHVua3MgPSAyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 252:
/***/ (function(module, exports) {

	eval("'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\r\n * ! Math.uuid.js (v1.4) http://www.broofa.com mailto:robert@broofa.com\r\n * \r\n * Copyright (c) 2010 Robert Kieffer Dual licensed under the MIT and GPL\r\n * licenses.\r\n */\n\n/*\r\n * Generate a random uuid.\r\n * \r\n * USAGE: Math.uuid(length, radix) length - the desired number of characters\r\n * radix - the number of allowable values for each character.\r\n * \r\n * EXAMPLES: // No arguments - returns RFC4122, version 4 ID >>> Math.uuid()\r\n * \"92329D39-6F5C-4520-ABFC-AAB64544E172\" // One argument - returns ID of the\r\n * specified length >>> Math.uuid(15) // 15 character ID (default base=62)\r\n * \"VcydxgltxrVZSTV\" // Two arguments - returns ID of the specified length, and\r\n * radix. (Radix must be <= 62) >>> Math.uuid(8, 2) // 8 character ID (base=2)\r\n * \"01001010\" >>> Math.uuid(8, 10) // 8 character ID (base=10) \"47473046\" >>>\r\n * Math.uuid(8, 16) // 8 character ID (base=16) \"098F4D35\"\r\n */\n(function () {\n    // Private array of chars to use\n    var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n\n    Math.uuid = function (len, radix) {\n        var chars = CHARS,\n            uuid = [],\n            i;\n        radix = radix || chars.length;\n\n        if (len) {\n            // Compact form\n            for (i = 0; i < len; i++) {\n                uuid[i] = chars[0 | Math.random() * radix];\n            }\n        } else {\n            // rfc4122, version 4 form\n            var r;\n\n            // rfc4122 requires these characters\n            uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n            uuid[14] = '4';\n\n            // Fill in random data. At i==19 set the high bits of clock sequence\n            // as\n            // per rfc4122, sec. 4.1.5\n            for (i = 0; i < 36; i++) {\n                if (!uuid[i]) {\n                    r = 0 | Math.random() * 16;\n                    uuid[i] = chars[i == 19 ? r & 0x3 | 0x8 : r];\n                }\n            }\n        }\n\n        return uuid.join('');\n    };\n\n    // A more performant, but slightly bulkier, RFC4122v4 solution. We boost\n    // performance\n    // by minimizing calls to random()\n    Math.uuidFast = function () {\n        var chars = CHARS,\n            uuid = new Array(36),\n            rnd = 0,\n            r;\n        for (var i = 0; i < 36; i++) {\n            if (i == 8 || i == 13 || i == 18 || i == 23) {\n                uuid[i] = '-';\n            } else if (i == 14) {\n                uuid[i] = '4';\n            } else {\n                if (rnd <= 0x02) rnd = 0x2000000 + Math.random() * 0x1000000 | 0;\n                r = rnd & 0xf;\n                rnd = rnd >> 4;\n                uuid[i] = chars[i == 19 ? r & 0x3 | 0x8 : r];\n            }\n        }\n        return uuid.join('');\n    };\n\n    // A more compact, but less performant, RFC4122v4 solution:\n    Math.uuidCompact = function () {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0,\n                v = c == 'x' ? r : r & 0x3 | 0x8;\n            return v.toString(16);\n        });\n    };\n})();\n\n/**\r\n * Util\r\n *\r\n * @constructor\r\n */\nfunction Util() {}\n\n/**\r\n * Function Logger\r\n *\r\n * @constructor\r\n */\nvar Logger = function Logger() {\n    var self = this;\n\n    var LogLevel = {\n        TRACE: 0,\n        DEBUG: 1,\n        INFO: 2,\n        WARN: 3,\n        ERROR: 4,\n        FATAL: 5\n    };\n\n    var LogLevelName = ['TRACE', 'DEBUG', 'INFO', 'WARN', 'ERROR', 'FATAL'];\n\n    this.log = function () {\n        var level = arguments[0];\n\n        level = arguments[0] = '[' + LogLevelName[level] + '] ';\n\n        var text = arguments[1];\n\n        if (WebIM && WebIM.config && WebIM.config.isDebug) {\n            console.log.apply(console, arguments);\n        }\n    };\n\n    function callLog(level, args) {\n        var _args = [];\n\n        _args.push(level);\n\n        for (var i in args) {\n            _args.push(args[i]);\n        }\n\n        self.log.apply(self, _args);\n    };\n\n    this.trace = function () {\n        this.log && callLog(LogLevel.TRACE, arguments);\n    };\n\n    this.debug = function () {\n        this.log && callLog(LogLevel.DEBUG, arguments);\n    };\n\n    this.info = function () {\n        this.log && callLog(LogLevel.INFO, arguments);\n    };\n\n    this.warn = function () {\n        this.log && callLog(LogLevel.WARN, arguments);\n    };\n\n    this.error = function () {\n        this.log && callLog(LogLevel.ERROR, arguments);\n    };\n\n    this.fatal = function () {\n        this.log && callLog(LogLevel.FATAL, arguments);\n    };\n};\n\nUtil.prototype.logger = new Logger();\n\n/**\r\n * parse json\r\n *\r\n * @param jsonString\r\n */\nUtil.prototype.parseJSON = function (jsonString) {\n    return JSON.parse(jsonString);\n};\n\n/**\r\n * json to string\r\n *\r\n * @type {Util.stringifyJSON}\r\n */\nvar stringifyJSON = Util.prototype.stringifyJSON = function (jsonObj) {\n    return JSON.stringify(jsonObj);\n};\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call(Object);\n\n/**\r\n * check object type\r\n *\r\n * @type {Util.isPlainObject}\r\n */\nvar isPlainObject = Util.prototype.isPlainObject = function (obj) {\n    var proto, Ctor;\n\n    // Detect obvious negatives\n    // Use toString instead of jQuery.type to catch host objects\n    if (!obj || toString.call(obj) !== \"[object Object]\") {\n        return false;\n    }\n\n    proto = Object.getPrototypeOf(obj);\n\n    // Objects with no prototype (e.g., `Object.create( null )`) are plain\n    if (!proto) {\n        return true;\n    }\n\n    // Objects with prototype are plain iff they were constructed by a\n    // global Object function\n    Ctor = hasOwn.call(proto, \"constructor\") && proto.constructor;\n    return typeof Ctor === \"function\" && fnToString.call(Ctor) === ObjectFunctionString;\n};\n\nUtil.prototype.isArray = Array.isArray;\n\n/**\r\n * check empty object\r\n *\r\n * @param obj\r\n * @returns {boolean}\r\n */\nUtil.prototype.isEmptyObject = function (obj) {\n    var name;\n    for (name in obj) {\n        return false;\n    }\n    return true;\n};\n\nUtil.prototype.type = function (obj) {\n    if (obj == null) {\n        return obj + \"\";\n    }\n    return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === \"object\" || typeof obj === \"function\" ? class2type[toString.call(obj)] || \"object\" : typeof obj === 'undefined' ? 'undefined' : _typeof(obj);\n};\n\n/**\r\n * Function extend\r\n *\r\n * @returns {*|{}}\r\n */\nUtil.prototype.extend = function () {\n    var self = this;\n    var options,\n        name,\n        src,\n        copy,\n        copyIsArray,\n        clone,\n        target = arguments[0] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false;\n\n    // Handle a deep copy situation\n    if (typeof target === \"boolean\") {\n        deep = target;\n\n        // Skip the boolean and the target\n        target = arguments[i] || {};\n        i++;\n    }\n\n    // Handle case when target is a string or something (possible in deep\n    // copy)\n    if ((typeof target === 'undefined' ? 'undefined' : _typeof(target)) !== \"object\" && !self.isFunction(target)) {\n        target = {};\n    }\n\n    // Extend self itself if only one argument is passed\n    if (i === length) {\n        target = this;\n        i--;\n    }\n\n    for (; i < length; i++) {\n\n        // Only deal with non-null/undefined values\n        if ((options = arguments[i]) != null) {\n\n            // Extend the base object\n            for (name in options) {\n                src = target[name];\n                copy = options[name];\n\n                // Prevent never-ending loop\n                if (target === copy) {\n                    continue;\n                }\n\n                // Recurse if we're merging plain objects or arrays\n                if (deep && copy && (self.isPlainObject(copy) || (copyIsArray = self.isArray(copy)))) {\n\n                    if (copyIsArray) {\n                        copyIsArray = false;\n                        clone = src && self.isArray(src) ? src : [];\n                    } else {\n                        clone = src && self.isPlainObject(src) ? src : {};\n                    }\n\n                    // Never move original objects, clone them\n                    target[name] = self.extend(deep, clone, copy);\n\n                    // Don't bring in undefined values\n                } else if (copy !== undefined) {\n                    target[name] = copy;\n                }\n            }\n        }\n    }\n\n    // Return the modified object\n    return target;\n};\n\n/**\r\n * get local cache\r\n *\r\n * @memberOf tool\r\n * @name hasLocalData\r\n * @param key{string}\r\n *            localStorage的key值\r\n * @return boolean\r\n */\nUtil.prototype.hasLocalStorage = function (key) {\n    // null -> localStorage.removeItem时\n    // '{}' -> collection.models.destroy时\n    if (localStorage.getItem(key) == null || localStorage.getItem(key) == '{}') {\n        return false;\n    }\n    return true;\n};\n\nUtil.prototype.toggleClass = function (node, className) {\n    if (node.hasClass(className)) {\n        node.removeClass(className);\n        return;\n    }\n    node.addClass(className);\n};\n\n/**\r\n * set cookie\r\n *\r\n * @param name{String}\r\n *\r\n * @param value{String}\r\n *\r\n * @param hour{Number}\r\n *\r\n * @return void\r\n */\nUtil.prototype.setCookie = function (name, value, hour) {\n    var exp = new Date();\n    exp.setTime(exp.getTime() + hour * 60 * 60 * 1000);\n    document.cookie = name + \"=\" + escape(value) + \";expires=\" + exp.toGMTString();\n};\n\n/**\r\n * read cookie\r\n *\r\n * @param name(String)\r\n *            cookie key\r\n * @return cookie value\r\n * @memberOf Tool\r\n */\nUtil.prototype.getCookie = function (name) {\n    var arr = document.cookie.match(new RegExp(\"(^| )\" + name + \"=([^;]*)(;|$)\"));\n    if (arr != null) {\n        return unescape(arr[2]);\n    }\n    return null;\n};\n\n/**\r\n * query parameter from url\r\n *\r\n * @name parseURL\r\n * @memberof C.Tools\r\n * @param {string}\r\n *\r\n * @return {string}\r\n * @type function\r\n * @public\r\n */\nUtil.prototype.parseURL = function (name) {\n    var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\", \"i\");\n    var r = window.location.search.substr(1).match(reg);\n    if (r != null) {\n        return unescape(r[2]);\n    }\n    return null;\n};\n\nmodule.exports = new Util();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 253:
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar Util = __webpack_require__(252);\nvar RTCIQHandler = __webpack_require__(254);\nvar API = __webpack_require__(255);\nvar WebRTC = __webpack_require__(256);\nvar CommonPattern = __webpack_require__(257);\n\nvar RouteTo = API.RouteTo;\nvar Api = API.Api;\nvar _logger = Util.logger;\n\nvar _Call = {\n    api: null,\n    caller: '',\n    connection: null,\n\n    pattern: null,\n\n    listener: {\n        onAcceptCall: function onAcceptCall(from, options) {},\n\n        onRinging: function onRinging(caller) {},\n\n        onTermCall: function onTermCall() {},\n\n        onIceConnectionStateChange: function onIceConnectionStateChange(iceState) {}\n    },\n\n    mediaStreamConstaints: {\n        audio: true,\n        video: true\n    },\n\n    init: function init() {\n        var self = this;\n\n        if (typeof self.connection === \"undefined\") {\n            throw \"Caller need a instance of Easemob.im.Connection\";\n        }\n\n        self.api = self.api || new Api({\n            imConnection: self.connection,\n\n            rtcHandler: new RTCIQHandler({\n                imConnection: self.connection\n            })\n        });\n\n        self.api.onInitC = function () {\n            self._onInitC.apply(self, arguments);\n        }, self.api.onIceConnectionStateChange = function () {\n            self.listener.onIceConnectionStateChange.apply(self, arguments);\n        };\n    },\n\n    makeVideoCall: function makeVideoCall(callee, accessSid) {\n        var self = this;\n\n        var mediaStreamConstaints = {};\n        Util.extend(mediaStreamConstaints, self.mediaStreamConstaints);\n        self.mediaStreamConstaints.video = true;\n\n        this.call(callee, mediaStreamConstaints, accessSid);\n    },\n\n    makeVoiceCall: function makeVoiceCall(callee, accessSid) {\n        console.log('ScareCrow');\n        var self = this;\n\n        var mediaStreamConstaints = {};\n        Util.extend(mediaStreamConstaints, self.mediaStreamConstaints);\n        self.mediaStreamConstaints.video = false;\n\n        self.call(callee, mediaStreamConstaints, accessSid);\n    },\n\n    acceptCall: function acceptCall() {\n        var self = this;\n        self.pattern.accept();\n    },\n\n    endCall: function endCall(callee) {\n        var self = this;\n        self.caller = '';\n        self.pattern.termCall();\n    },\n\n    call: function call(callee, mediaStreamConstaints, accessSid) {\n        var self = this;\n        this.callee = this.api.jid(callee);\n\n        var rt = new RouteTo({\n            rtKey: \"\",\n            sid: accessSid,\n\n            success: function success(result) {\n                _logger.debug(\"iq to server success\", result);\n            },\n            fail: function fail(error) {\n                _logger.debug(\"iq to server error\", error);\n                self.onError(error);\n            }\n        });\n\n        this.api.reqP2P(rt, mediaStreamConstaints.video ? 1 : 0, mediaStreamConstaints.audio ? 1 : 0, this.api.jid(callee), function (from, rtcOptions) {\n            if (rtcOptions.online == \"0\") {\n                self.listener.onError({ message: \"callee is not online!\" });\n                return;\n            }\n            self._onGotServerP2PConfig(from, rtcOptions);\n            self.pattern.initC(self.mediaStreamConstaints, accessSid);\n        });\n    },\n\n    _onInitC: function _onInitC(from, options, rtkey, tsxId, fromSid) {\n        var self = this;\n\n        self.callee = from;\n        self._rtcCfg = options.rtcCfg;\n        self._WebRTCCfg = options.WebRTC;\n\n        self.sessId = options.sessId;\n        self.rtcId = options.rtcId;\n\n        self.switchPattern(options.streamType == \"VIDEO\" ? \"VIDEO\" : \"VOICE\");\n        self.pattern._onInitC(from, options, rtkey, tsxId, fromSid);\n    },\n\n    _onGotServerP2PConfig: function _onGotServerP2PConfig(from, rtcOptions) {\n        var self = this;\n\n        if (rtcOptions.result == 0) {\n            self._p2pConfig = rtcOptions;\n            self._rtcCfg = rtcOptions.rtcCfg;\n            self._rtcCfg2 = rtcOptions.rtcCfg2;\n\n            self.sessId = rtcOptions.sessId;\n            self.rtcId = \"Channel_webIM\";\n\n            self._rtKey = self._rtkey = rtcOptions.rtKey || rtcOptions.rtkey;\n            self._rtFlag = self._rtflag = rtcOptions.rtFlag || rtcOptions.rtflag;\n\n            self._WebRTCCfg = rtcOptions.WebRTC;\n            self.admtok = rtcOptions.admtok;\n            self.tkt = rtcOptions.tkt;\n\n            self.switchPattern(self.mediaStreamConstaints.audio && self.mediaStreamConstaints.video ? \"VIDEO\" : \"VOICE\");\n        } else {\n            //\n        }\n    },\n\n    switchPattern: function switchPattern(streamType) {\n        var self = this;\n\n        !self._WebRTCCfg && (self.pattern = new CommonPattern({\n            callee: self.callee,\n\n            _p2pConfig: self._p2pConfig,\n            _rtcCfg: self._rtcCfg,\n            _rtcCfg2: self._rtcCfg2,\n\n            _rtKey: self._rtKey || self._rtkey,\n            _rtFlag: self._rtFlag || self._rtflag,\n\n            _sessId: self.sessId,\n            _rtcId: self.rtcId,\n\n            webRtc: new WebRTC({\n                streamType: streamType,\n                onGotLocalStream: self.listener.onGotLocalStream,\n                onGotRemoteStream: self.listener.onGotRemoteStream,\n                onError: self.listener.onError\n            }),\n\n            api: self.api,\n\n            onAcceptCall: self.listener && self.listener.onAcceptCall || function () {},\n            onRinging: self.listener && self.listener.onRinging || function () {},\n            onTermCall: self.listener && self.listener.onTermCall || function () {},\n            onOtherUserOpenVoice: self.listener && self.listener.onOtherUserOpenVoice || function () {},\n            onOtherUserOpenVideo: self.listener && self.listener.onOtherUserOpenVideo || function () {}\n        }));\n    }\n};\n\nmodule.exports = function (initConfigs) {\n    Util.extend(true, this, _Call, initConfigs || {});\n\n    this.init();\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 254:
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\n/**\r\n * IQ Message，IM -> CMServer --> IM\r\n */\n\nvar _util = __webpack_require__(252);\nvar _logger = _util.logger;\nvar API = __webpack_require__(255);\nvar RouteTo = API.RouteTo;\n\nvar CONFERENCE_XMLNS = \"urn:xmpp:media-conference\";\n\nvar _RtcHandler = {\n    _apiCallbacks: {},\n\n    imConnection: null,\n\n    _connectedSid: '',\n\n    init: function init() {\n        var self = this;\n\n        var _conn = self.imConnection;\n\n        _conn.registerConfrIQHandler = function () {\n            var handleConferenceIQ = function handleConferenceIQ(msginfo) {\n                try {\n                    self.handleRtcMessage(msginfo);\n                } catch (error) {\n                    _logger.error(error.stack || error);\n                    throw error;\n                }\n\n                return true;\n            };\n\n            _conn.addHandler(handleConferenceIQ, CONFERENCE_XMLNS, 'iq', \"set\");\n            _conn.addHandler(handleConferenceIQ, CONFERENCE_XMLNS, 'iq', \"get\");\n\n            _logger.warn(\"Conference iq handler. registered.\");\n        };\n    },\n\n    handleRtcMessage: function handleRtcMessage(msginfo) {\n        var self = this;\n\n        var id = msginfo.getAttribute('id');\n        var from = msginfo.getAttribute('from') || '';\n\n        // remove resource\n        from.lastIndexOf(\"/\") >= 0 && (from = from.substring(0, from.lastIndexOf(\"/\")));\n\n        var rtkey = msginfo.getElementsByTagName('rtkey')[0].innerHTML;\n\n        var fromSessionId = msginfo.getElementsByTagName('sid')[0].innerHTML;\n\n        (self._fromSessionID || (self._fromSessionID = {}))[from] = fromSessionId;\n\n        var contentTags = msginfo.getElementsByTagName('content');\n\n        var contentString = contentTags[0].innerHTML;\n\n        var content = _util.parseJSON(contentString);\n\n        var rtcOptions = content;\n\n        var streamType = msginfo.getElementsByTagName('stream_type')[0].innerHTML; //VOICE, VIDEO\n\n        if (streamType == \"\") {\n            streamType = \"VOICE\";\n        }\n\n        rtcOptions.streamType = streamType;\n\n        if (rtcOptions.op == 102) {\n            self.singalStreamType = streamType;\n        }\n\n        var tsxId = content.tsxId;\n\n        self.ctx = content.ctx;\n\n        _logger.debug(\"Recv [op = \" + rtcOptions.op + \"] [tsxId=\" + tsxId + \"]\\r\\n json :\", msginfo);\n\n        //if a->b already, c->a/b should be termiated with 'busy' reason\n        if (from.indexOf(\"@\") >= 0) {\n            if (self._connectedSid == '' && rtcOptions.op == 102) {\n                self._connectedSid = fromSessionId;\n            } else {\n                if (self._connectedSid != fromSessionId) {\n                    _logger.debug(\"Error recv [op = \" + rtcOptions.op + \"] [tsxId=\" + tsxId + \"]. caused by _connectedSid != fromSessionId :\", self._connectedSid, fromSessionId);\n\n                    //onInitC\n                    if (rtcOptions.op == 102) {\n                        var rt = new RouteTo({\n                            to: from,\n                            rtKey: rtkey,\n                            sid: fromSessionId,\n                            success: function success(result) {\n                                _logger.debug(\"iq to server success\", result);\n                            },\n                            fail: function fail(error) {\n                                _logger.debug(\"iq to server error\", error);\n                                self.onError(error);\n                            }\n                        });\n\n                        var options = {\n                            data: {\n                                op: 107,\n                                sessId: rtcOptions.sessId,\n                                rtcId: rtcOptions.rtcId,\n                                reason: 'busy'\n\n                            },\n                            reason: 'busy'\n                        };\n                        self.sendRtcMessage(rt, options);\n                    }\n                    return;\n                }\n            }\n        }\n\n        //onTermC\n        if (rtcOptions.op == 107) {\n            self._connectedSid = '';\n            self._fromSessionID = {};\n\n            var reasonObj = msginfo.getElementsByTagName('reason');\n            //var endReason = msginfo.getElementsByTagName('reason')[0].innerHTML;\n            reasonObj && reasonObj.length > 0 && (rtcOptions.reason = reasonObj[0].innerHTML);\n        }\n\n        if (rtcOptions.sdp) {\n            if (typeof rtcOptions.sdp === 'string') {\n                rtcOptions.sdp = _util.parseJSON(rtcOptions.sdp);\n            }\n            rtcOptions.sdp.type && (rtcOptions.sdp.type = rtcOptions.sdp.type.toLowerCase());\n        }\n        if (rtcOptions.cands) {\n            if (typeof rtcOptions.cands === 'string') {\n                rtcOptions.cands = _util.parseJSON(rtcOptions.cands);\n            }\n\n            for (var i = 0; i < rtcOptions.cands.length; i++) {\n                typeof rtcOptions.cands[i] === 'string' && (rtcOptions.cands[i] = _util.parseJSON(rtcOptions.cands[i]));\n\n                rtcOptions.cands[i].sdpMLineIndex = rtcOptions.cands[i].mlineindex;\n                rtcOptions.cands[i].sdpMid = rtcOptions.cands[i].mid;\n\n                delete rtcOptions.cands[i].mlineindex;\n                delete rtcOptions.cands[i].mid;\n            }\n        }\n\n        rtcOptions.rtcCfg && typeof rtcOptions.rtcCfg === 'string' && (rtcOptions.rtcCfg = _util.parseJSON(rtcOptions.rtcCfg));\n        rtcOptions.rtcCfg2 && typeof rtcOptions.rtcCfg2 === 'string' && (rtcOptions.rtcCfg2 = _util.parseJSON(rtcOptions.rtcCfg2));\n        rtcOptions.WebRTC && typeof rtcOptions.WebRTC === 'string' && (rtcOptions.WebRTC = _util.parseJSON(rtcOptions.WebRTC));\n\n        if (tsxId && self._apiCallbacks[tsxId]) {\n            try {\n                self._apiCallbacks[tsxId].callback && self._apiCallbacks[tsxId].callback(from, rtcOptions);\n            } catch (err) {\n                throw err;\n            } finally {\n                delete self._apiCallbacks[tsxId];\n            }\n        } else {\n            self.onRecvRtcMessage(from, rtcOptions, rtkey, tsxId, fromSessionId);\n        }\n\n        return true;\n    },\n\n    onRecvRtcMessage: function onRecvRtcMessage(from, rtcOptions, rtkey, tsxId, fromSessionId) {\n        _logger.debug(' form : ' + from + \" \\r\\n json :\" + _util.stringifyJSON(rtcJSON));\n    },\n\n    convertRtcOptions: function convertRtcOptions(options) {\n        var sdp = options.data.sdp;\n        if (sdp) {\n            var _sdp = {\n                type: sdp.type,\n                sdp: sdp.sdp\n            };\n\n            sdp = _sdp;\n\n            sdp.type = sdp.type.toUpperCase();\n            sdp = _util.stringifyJSON(sdp);\n\n            options.data.sdp = sdp;\n        }\n\n        var cands = options.data.cands;\n\n        if (cands) {\n            if (_util.isArray(cands)) {} else {\n                var _cands = [];\n                _cands.push(cands);\n                cands = _cands;\n            }\n\n            for (var i in cands) {\n                if (cands[i] instanceof RTCIceCandidate) {\n                    var _cand = {\n                        type: \"candidate\",\n                        candidate: cands[i].candidate,\n                        mlineindex: cands[i].sdpMLineIndex,\n                        mid: cands[i].sdpMid\n                        // seq: i\n                    };\n\n                    cands[i] = _util.stringifyJSON(_cand);\n                }\n            }\n\n            options.data.cands = cands;\n        } else {\n            // options.data.cands = [];\n        }\n\n        var rtcCfg = options.data.rtcCfg;\n        if (rtcCfg) {\n            typeof rtcCfg !== 'string' && (options.data.rtcCfg = _util.stringifyJSON(rtcCfg));\n        }\n\n        var _webrtc = options.data.WebRTC;\n        if (_webrtc) {\n            typeof _webrtc !== 'string' && (options.data.WebRTC = _util.stringifyJSON(_webrtc));\n        }\n    },\n\n    /**\r\n     * rt: { id: , to: , rtKey: , rtflag: , sid: , tsxId: , type: , }\r\n     *\r\n     * rtcOptions: { data : { op : 'reqP2P', video : 1, audio : 1, peer :\r\n     * curChatUserId, //appKey + \"_\" + curChatUserId + \"@\" + this.domain, } }\r\n     *\r\n     */\n    sendRtcMessage: function sendRtcMessage(rt, options, callback) {\n        var self = this;\n\n        var _conn = self.imConnection;\n\n        var tsxId = rt.tsxId || _conn.getUniqueId();\n\n        var to = rt.to || _conn.domain;\n\n        var sid = rt.sid || self._fromSessionID && self._fromSessionID[to];\n        //sid = sid || ((self._fromSessionID || (self._fromSessionID = {}))[to] = _conn.getUniqueId(\"CONFR_\"));\n        sid = sid || _conn.getUniqueId(\"CONFR_\");\n        (self._fromSessionID || (self._fromSessionID = {}))[to] = sid;\n\n        if (to.indexOf(\"@\") >= 0) {\n            if (self._connectedSid == '' && options.data.op == 102) {\n                self._connectedSid = sid;\n            }\n        }\n        var rtKey = rt.rtKey || rt.rtkey;\n        // rtKey && delete rt.rtKey;\n        rtKey || (rtKey = \"\");\n\n        var rtflag = rt.rtflag;\n        // rtflag && delete rt.rtflag;\n        rtflag || (rtflag = 1);\n\n        options.data || (options.data = {});\n        options.data.tsxId = tsxId;\n\n        self.ctx && (options.data.ctx = self.ctx);\n        self.convertRtcOptions(options);\n\n        var streamType = options.streamType || self.singalStreamType || \"VIDEO\"; // \"VIDEO\"; //VOICE, VIDEO\n        if (options.data.op == 102) {\n            self.singalStreamType = streamType;\n        }\n\n        var id = rt.id || _conn.getUniqueId(\"CONFR_\");\n        var iq = $iq({\n            // xmlns: CONFERENCE_XMLNS,\n            id: id,\n            to: to,\n            from: _conn.context.jid,\n            type: rt.type || \"get\"\n        }).c(\"query\", {\n            xmlns: CONFERENCE_XMLNS\n        }).c(\"MediaReqExt\").c('rtkey').t(rtKey).up().c('rtflag').t(rtflag).up().c('stream_type').t(streamType).up().c('sid').t(sid).up().c('content').t(_util.stringifyJSON(options.data));\n\n        if (options.data.op == 107 && options.reason) {\n            iq.up().c('reason').t(options.reason);\n        }\n        _logger.debug(\"Send [op = \" + options.data.op + \"] : \\r\\n\", iq.tree());\n\n        callback && (self._apiCallbacks[tsxId] = {\n            callback: callback\n        });\n\n        var completeFn = function (result) {\n            rt.success(result);\n        } || function (result) {\n            _logger.debug(\"send result. op:\" + options.data.op + \".\", result);\n        };\n\n        var errFn = function (ele) {\n            rt.fail(ele);\n        } || function (ele) {\n            _logger.debug(ele);\n        };\n\n        _conn.context.stropheConn.sendIQ(iq.tree(), completeFn, errFn);\n\n        //onTermC\n        if (options.data.op == 107 && self._connectedSid) {\n            if (!rt.sid || self._connectedSid == rt.sid) {\n                self._connectedSid = '';\n                self._fromSessionID = {};\n            }\n        }\n    }\n};\n\nvar RTCIQHandler = function RTCIQHandler(initConfigs) {\n    _util.extend(true, this, _RtcHandler, initConfigs || {});\n\n    this.init();\n};\nmodule.exports = RTCIQHandler;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 255:
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\r\n * API\r\n */\nvar _util = __webpack_require__(252);\nvar _logger = _util.logger;\n\nvar _RouteTo = {\n    // to : null,\n    // rtKey: null,\n    rtFlag: 1,\n\n    success: function success(result) {},\n    fail: function fail(error) {}\n};\n\nvar RouteTo = function RouteTo(extendCfg) {\n    if (this instanceof RouteTo) {\n        var self = this;\n        _util.extend(true, self, _RouteTo, extendCfg || {});\n    } else {\n        var sub = function sub(extendCfg) {\n            var self = this;\n            _util.extend(true, self, extendCfg || {});\n        };\n\n        _util.extend(true, sub.prototype, _RouteTo, extendCfg || {});\n\n        return sub;\n    }\n};\nexports.RouteTo = RouteTo;\n\nvar _clazz = {\n    imConnection: null,\n    // webRtc: null,\n\n    rtcHandler: null,\n\n    events: {\n        '0': 'onReqP2P',\n        '1': 'onNewCfr',\n        '2': 'onDelCfr',\n        '3': 'onReqTkt',\n\n        '100': 'onPing',\n        '101': 'onPong',\n        '102': 'onInitC',\n        '103': 'onReqC',\n        '104': 'onAcptC',\n        '105': 'onTcklC',\n        '106': 'onAnsC',\n        '107': 'onTermC',\n\n        // '200' : 'onEnter',\n        // '201' : 'onExit',\n        // '202' : 'onInvite',\n        // '203' : 'onGetMems',\n\n        // '205' : 'onSubC',\n        // '206' : 'onUsubC',\n\n        '300': 'onEvEnter',\n        '301': 'onEvExit',\n        '302': 'onEvPub',\n        '303': 'onEvUnpub',\n        '304': 'onEvMems',\n        '204': 'onEvClose',\n        '400': 'onStreamControl',\n        '401': 'onEvJoin',\n\n        'onServerError': 'onServerError'\n    },\n\n    register: function register(listener) {\n        if ((typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) === \"object\") {\n            for (var event in listener) {\n                this.bind(event, listener[event]);\n            }\n        }\n    },\n\n    bind: function bind(event, func) {\n        var self = this;\n\n        var onFunc;\n        if (onFunc = self.events[event]) {\n            self[onFunc] = func;\n        } else {\n            onFunc = self.events[event] = 'on_' + event;\n            self[onFunc] = func;\n        }\n    },\n\n    jid: function jid(shortUserName) {\n        if (/^.+#.+_.+@.+$/g.test(shortUserName)) {\n            return shortUserName;\n        }\n        // if (shortUserName.indexOf(this.imConnection.context.appKey) >= 0) {\n        //     return shortUserName;\n        // }\n        return this.imConnection.context.appKey + \"_\" + shortUserName + \"@\" + this.imConnection.domain;\n    },\n\n    /**\r\n     * ReqP2P 0\r\n     *\r\n     * @param rt\r\n     *            {to: , rtKey: , rtflag: , success(result), fail(error)}\r\n     *\r\n     * @param callback(from, rtcOptions)\r\n     *\r\n     *\r\n     * @param video\r\n     *            1 0\r\n     * @param audio\r\n     *            1 0\r\n     * @param peer\r\n     *\r\n     */\n    reqP2P: function reqP2P(rt, video, audio, peer, callback) {\n        _logger.debug(\"req p2p ...\");\n\n        var rtcOptions = {\n            data: {\n                op: 0,\n                video: video,\n                audio: audio,\n                peer: peer // appKey + \"_\" + curChatUserId + \"@\" + this.domain,\n            }\n        };\n\n        this.rtcHandler.sendRtcMessage(rt, rtcOptions, callback);\n    },\n\n    /**\r\n     * NewCfr 1\r\n     *\r\n     * @param rt\r\n     *            {to: , rtKey: , rtflag: , success(result), fail(error)}\r\n     *\r\n     * @param callback(from, rtcOptions)\r\n     *\r\n     *\r\n     * @param reqTkt\r\n     *            1 null\r\n     * @param password\r\n     *            string null\r\n     *\r\n     */\n    newCfr: function newCfr(rt, reqTkt, password, callback) {\n        _logger.debug(\"newCfr ...\");\n\n        var self = this;\n\n        var rtcOptions = {\n            data: {\n                op: 1\n            }\n        };\n\n        reqTkt && (rtcOptions.data.reqTkt = reqTkt);\n        password && (rtcOptions.data.password = password);\n\n        self.rtcHandler.sendRtcMessage(rt, rtcOptions, callback);\n    },\n\n    /**\r\n     * Enter 200\r\n     *\r\n     * @param rt\r\n     *            {to: , rtKey: , rtflag: , success(result), fail(error)}\r\n     *\r\n     * @param callback(from, rtcOptions)\r\n     *\r\n     *\r\n     * @param WebRTCId\r\n     * @param reqMembers !=\r\n     *            0 members\r\n     * @param tkt\r\n     * @param nonce\r\n     * @param digest\r\n     *\r\n     */\n    enter: function enter(rt, WebRTCId, reqMembers, tkt, nonce, digest, callback) {\n        _logger.debug(\"enter ...\");\n\n        var self = this;\n\n        var rtcOptions = {\n            data: {\n                op: 200\n            }\n        };\n\n        WebRTCId && (rtcOptions.data.WebRTCId = WebRTCId);\n        reqMembers && (rtcOptions.data.reqMembers = reqMembers);\n        tkt && (rtcOptions.data.tkt = tkt);\n        nonce && (rtcOptions.data.nonce = nonce);\n        digest && (rtcOptions.data.digest = digest);\n\n        self.rtcHandler.sendRtcMessage(rt, rtcOptions, callback);\n    },\n\n    /**\r\n     * Ping 100\r\n     *\r\n     * @param rt\r\n     *            {to: , rtKey: , rtflag: , success(result), fail(error)}\r\n     *\r\n     * @param callback(from, rtcOptions)\r\n     *\r\n     *\r\n     * @param sessId\r\n     *\r\n     */\n    ping: function ping(rt, sessId, callback) {\n        _logger.debug(\"ping ...\");\n\n        var self = this;\n\n        var rtcOptions = {\n            data: {\n                op: 100\n            }\n        };\n\n        sessId && (rtcOptions.data.sessId = sessId);\n\n        self.rtcHandler.sendRtcMessage(rt, rtcOptions, callback);\n    },\n\n    /**\r\n     * 通知对方 我已经关闭/打开 麦卡，摄像头\r\n     *\r\n     * PAUSE_VOICE(0, 0), RESUME_VOICE(1, 1), PAUSE_VIDEO(2, 2), RESUME_VIDEO(3, 3)\r\n     *\r\n     *\r\n     * @param rt\r\n     * @param sessId\r\n     * @param rtcId\r\n     * @param controlType\r\n     * @param callback\r\n     */\n    streamControl: function streamControl(rt, sessId, rtcId, controlType, callback) {\n        _logger.debug(\"streamControl ...\");\n\n        var self = this;\n\n        var rtcOptions = {\n            data: {\n                op: 400\n            }\n        };\n\n        sessId && (rtcOptions.data.sessId = sessId);\n        rtcId && (rtcOptions.data.rtcId = rtcId);\n        typeof controlType !== 'undefined' && controlType != null && (rtcOptions.data.controlType = controlType);\n\n        self.rtcHandler.sendRtcMessage(rt, rtcOptions, callback);\n    },\n\n    /**\r\n     * ReqTkt 3\r\n     *\r\n     * @param rt\r\n     *            {to: , rtKey: , rtflag: , success(result), fail(error)}\r\n     *\r\n     * @param callback(from, rtcOptions)\r\n     *\r\n     *\r\n     * @param WebRTCId\r\n     * @param success(from,\r\n     *            rtcOptions)\r\n     *\r\n     */\n    reqTkt: function reqTkt(rt, WebRTCId, callback) {\n        _logger.debug(\"reqTkt ...\");\n\n        var self = this;\n\n        var rtcOptions = {\n            data: {\n                op: 3\n            }\n        };\n\n        WebRTCId && (rtcOptions.data.WebRTCId = WebRTCId);\n\n        self.rtcHandler.sendRtcMessage(rt, rtcOptions, callback);\n    },\n\n    /**\r\n     * InitC 102\r\n     *\r\n     * @param rt\r\n     *            {to: , rtKey: , rtflag: , success(result), fail(error)}\r\n     *\r\n     * @param callback(from, rtcOptions)\r\n     *\r\n     *\r\n     * @param WebRTCId\r\n     * @param tkt\r\n     * @param sessId\r\n     * @param rtcId\r\n     * @param pubS\r\n     *            {name: streamName, video:1, audio:1, type: 0}\r\n     * @param subS\r\n     *            {memId: , rtcId: }\r\n     * @param sdp\r\n     *            sdp:sdpstring\r\n     * @param cands [ ]\r\n     *\r\n     */\n    initC: function initC(rt, streamType, WebRTCId, tkt, sessId, rtcId, pubS, subS, sdp, cands, rtcCfg, WebRTC, callback) {\n        _logger.debug(\"initC ...\");\n\n        var rtcOptions = {\n            data: {\n                op: 102\n            }\n        };\n\n        rtcOptions.streamType = streamType || \"VIDEO\";\n\n        WebRTCId && (rtcOptions.data.WebRTCId = WebRTCId);\n        tkt && (rtcOptions.data.tkt = tkt);\n        sessId && (rtcOptions.data.sessId = sessId);\n        rtcId && (rtcOptions.data.rtcId = rtcId);\n        pubS && (rtcOptions.data.pubS = pubS);\n        subS && (rtcOptions.data.subS = subS);\n        sdp && (rtcOptions.data.sdp = sdp);\n        cands && (rtcOptions.data.cands = cands);\n        rtcCfg && (rtcOptions.data.rtcCfg = rtcCfg);\n        WebRTC && (rtcOptions.data.WebRTC = WebRTC);\n\n        this.rtcHandler.sendRtcMessage(rt, rtcOptions, callback);\n    },\n\n    /**\r\n     * TcklC 105\r\n     *\r\n     * @param rt\r\n     *            {to: , rtKey: , rtflag: , success(result), fail(error)}\r\n     *\r\n     * @param callback(from, rtcOptions)\r\n     *\r\n     *\r\n     * @param sessId\r\n     * @param rtcId\r\n     * @param cands\r\n     * @param success(from,\r\n     *            rtcOptions)\r\n     *\r\n     */\n    tcklC: function tcklC(rt, sessId, rtcId, sdp, cands, callback) {\n        _logger.debug(\"tcklC ...\");\n\n        var self = this;\n\n        var rtcOptions = {\n            data: {\n                op: 105\n            }\n        };\n\n        sessId && (rtcOptions.data.sessId = sessId);\n        rtcId && (rtcOptions.data.rtcId = rtcId);\n        sdp && (rtcOptions.data.sdp = sdp);\n        cands && (rtcOptions.data.cands = cands);\n\n        self.rtcHandler.sendRtcMessage(rt, rtcOptions, callback);\n    },\n\n    /**\r\n     * AnsC 106\r\n     *\r\n     * @param rt\r\n     *            {to: , rtKey: , rtflag: , success(result), fail(error)}\r\n     *\r\n     * @param callback(from, rtcOptions)\r\n     *\r\n     *\r\n     * @param sessId\r\n     * @param rtcId\r\n     * @param sdp\r\n     * @param cands\r\n     *\r\n     */\n    ansC: function ansC(rt, sessId, rtcId, sdp, cands, callback, enableVoice, enableVideo) {\n        _logger.debug(\"ansC ...\");\n\n        var self = this;\n\n        var rtcOptions = {\n            data: {\n                op: 106\n            }\n        };\n\n        sessId && (rtcOptions.data.sessId = sessId);\n        rtcId && (rtcOptions.data.rtcId = rtcId);\n        sdp && (rtcOptions.data.sdp = sdp);\n        cands && (rtcOptions.data.cands = cands);\n\n        enableVoice === false && (rtcOptions.data.enableVoice = enableVoice);\n        enableVideo === false && (rtcOptions.data.enableVideo = enableVideo);\n\n        // rtcOptions.data.enableVoice = false;\n        // rtcOptions.data.enableVideo = false;\n\n        self.rtcHandler.sendRtcMessage(rt, rtcOptions, callback);\n    },\n\n    /**\r\n     * AcptC 104\r\n     *\r\n     * @param rt\r\n     *            {to: , rtKey: , rtflag: , success(result), fail(error)}\r\n     *\r\n     * @param callback(from, rtcOptions)\r\n     *\r\n     *\r\n     * @param sessId\r\n     * @param rtcId\r\n     * @param sdp\r\n     * @param ans\r\n     *            1\r\n     *\r\n     */\n    acptC: function acptC(rt, sessId, rtcId, sdp, cands, ans, callback, enableVoice, enableVideo) {\n        _logger.debug(\"acptC ...\");\n\n        var self = this;\n\n        var rtcOptions = {\n            data: {\n                op: 104\n            }\n        };\n\n        sessId && (rtcOptions.data.sessId = sessId);\n        rtcId && (rtcOptions.data.rtcId = rtcId);\n        sdp && (rtcOptions.data.sdp = sdp);\n        cands && (rtcOptions.data.cands = cands);\n        ans && (rtcOptions.data.ans = ans);\n\n        enableVoice === false && (rtcOptions.data.enableVoice = enableVoice);\n        enableVideo === false && (rtcOptions.data.enableVideo = enableVideo);\n\n        // rtcOptions.data.enableVoice = false;\n        // rtcOptions.data.enableVideo = false;\n\n        self.rtcHandler.sendRtcMessage(rt, rtcOptions, callback);\n    },\n\n    /**\r\n     * GetMems 203\r\n     *\r\n     * @param rt\r\n     *            {to: , rtKey: , rtflag: , success(result), fail(error)}\r\n     *\r\n     * @param callback(from, rtcOptions)\r\n     *\r\n     *\r\n     * @param WebRTCId\r\n     * @param sessId\r\n     * @param success(from,\r\n     *            rtcOptions)\r\n     *\r\n     */\n    getMems: function getMems(rt, WebRTCId, sessId, callback) {\n        _logger.debug(\"getMems ...\");\n\n        var self = this;\n\n        var rtcOptions = {\n            data: {\n                op: 203\n            }\n        };\n\n        WebRTCId && (rtcOptions.data.WebRTCId = WebRTCId);\n        sessId && (rtcOptions.data.sessId = sessId);\n\n        self.rtcHandler.sendRtcMessage(rt, rtcOptions, callback);\n    },\n\n    /**\r\n     * SubC 205\r\n     *\r\n     * @param rt\r\n     *            {to: , rtKey: , rtflag: , success(result), fail(error)}\r\n     *\r\n     * @param callback(from, rtcOptions)\r\n     *\r\n     *\r\n     * @param sessId\r\n     * @param rtcId\r\n     * @param subS\r\n     *            {memId:m001, rtcId:r001}\r\n     *\r\n     */\n    subC: function subC(rt, sessId, rtcId, subS, callback) {\n        _logger.debug(\"subC ...\");\n\n        var self = this;\n\n        var rtcOptions = {\n            data: {\n                op: 205\n            }\n        };\n\n        sessId && (rtcOptions.data.sessId = sessId);\n        rtcId && (rtcOptions.data.rtcId = rtcId);\n        subS && (rtcOptions.data.subS = subS);\n\n        self.rtcHandler.sendRtcMessage(rt, rtcOptions, callback);\n    },\n\n    /**\r\n     * UsubC 206\r\n     *\r\n     * @param rt\r\n     *            {to: , rtKey: , rtflag: , success(result), fail(error)}\r\n     *\r\n     * @param callback(from, rtcOptions)\r\n     *\r\n     *\r\n     * @param sessId\r\n     * @param rtcId\r\n     *\r\n     */\n    usubC: function usubC(rt, sessId, rtcId, callback) {\n        _logger.debug(\"usubC ...\");\n\n        var self = this;\n\n        var rtcOptions = {\n            data: {\n                op: 206\n            }\n        };\n\n        sessId && (rtcOptions.data.sessId = sessId);\n        rtcId && (rtcOptions.data.rtcId = rtcId);\n\n        self.rtcHandler.sendRtcMessage(rt, rtcOptions, callback);\n    },\n\n    /**\r\n     * TermC 107\r\n     *\r\n     * @param rt\r\n     *            {to: , rtKey: , rtflag: , success(result), fail(error)}\r\n     *\r\n     * @param callback(from, rtcOptions)\r\n     *\r\n     *\r\n     * @param sessId\r\n     * @param rtcId\r\n     * @param reason\r\n     *               \"ok\"      -> 'HANGUP'     \"success\" -> 'HANGUP'   \"timeout\"          -> 'NORESPONSE'\r\n     *               \"decline\" -> 'REJECT'     \"busy\"    -> 'BUSY'     \"failed-transport\" -> 'FAIL'\r\n     *\r\n     */\n    termC: function termC(rt, sessId, rtcId, reason, callback) {\n        _logger.debug(\"termC ...\");\n\n        var self = this;\n\n        var rtcOptions = {\n            data: {\n                op: 107\n            }\n        };\n\n        sessId && (rtcOptions.data.sessId = sessId);\n        rtcId && (rtcOptions.data.rtcId = rtcId);\n        reason && (rtcOptions.reason = reason);\n\n        self.rtcHandler.sendRtcMessage(rt, rtcOptions, callback);\n    },\n\n    /**\r\n     * Exit 201\r\n     *\r\n     * @param rt\r\n     *            {to: , rtKey: , rtflag: , success(result), fail(error)}\r\n     *\r\n     * @param callback(from, rtcOptions)\r\n     *\r\n     *\r\n     * @param WebRTCId\r\n     * @param sessId\r\n     * @param success(from,\r\n     *            rtcOptions)\r\n     *\r\n     */\n    exit: function exit(rt, WebRTCId, sessId, callback) {\n        _logger.debug(\"exit ...\");\n\n        var self = this;\n\n        var rtcOptions = {\n            data: {\n                op: 201\n            }\n        };\n\n        WebRTCId && (rtcOptions.data.WebRTCId = WebRTCId);\n        sessId && (rtcOptions.data.sessId = sessId);\n\n        self.rtcHandler.sendRtcMessage(rt, rtcOptions, callback);\n    },\n\n    /**\r\n     * DelCfr 2\r\n     *\r\n     * @param rt\r\n     *            {to: , rtKey: , rtflag: , success(result), fail(error)}\r\n     *\r\n     * @param callback(from, rtcOptions)\r\n     *\r\n     *\r\n     * @param WebRTCId\r\n     * @param admtok\r\n     * @param success(from,\r\n     *            rtcOptions)\r\n     *\r\n     */\n    delCfr: function delCfr(rt, WebRTCId, admtok, callback) {\n        _logger.debug(\"delCfr ...\");\n\n        var self = this;\n\n        var rtcOptions = {\n            data: {\n                op: 2\n            }\n        };\n\n        WebRTCId && (rtcOptions.data.WebRTCId = WebRTCId);\n        admtok && (rtcOptions.data.admtok = admtok);\n\n        self.rtcHandler.sendRtcMessage(rt, rtcOptions, callback);\n    }\n};\n\nexports.Api = function (initConfigs) {\n    var self = this;\n\n    _util.extend(true, this, _clazz, initConfigs || {});\n\n    function _onRecvRtcMessage(from, rtcOptions, rtkey, tsxId, fromSessionId) {\n        if (rtcOptions.result != 0 && self['onServerError']) {\n            self['onServerError'].call(self, from, rtcOptions, rtkey, tsxId, fromSessionId);\n        } else {\n            var onFunction;\n\n            if (self.events[rtcOptions.op] && (onFunction = self[self.events[rtcOptions.op]])) {\n                onFunction.call(self, from, rtcOptions, rtkey, tsxId, fromSessionId);\n            } else {\n                _logger.info(\"can not handle(recvRtcMessage) the op: \" + rtcOptions.op, rtcOptions);\n            }\n        }\n    }\n\n    this.rtcHandler.onRecvRtcMessage = _onRecvRtcMessage;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 256:
/***/ (function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\n/**\r\n * WebRTC\r\n *\r\n *                              A                   |                                       B\r\n *                                                  |\r\n *   1.createMedia:got streamA                      | 1.createMedia:got streamB\r\n *   2.new RTCPeerConnection: APeerConnection       | 2.new RTCPeerConnection: BPeerConnection\r\n *   3.APeerConnection.createOffer:got offerA       |\r\n *      APeerConnection.setLocalDescription(offerA) |\r\n *      send offerA ---> ---> ---> --->        ---> |\r\n *                                                  | ---> 3.got offerA | offerA = new RTCSessionDescription(offerA);\r\n *                                                  | BPeerConnection.setRemoteDescription(offerA)\r\n *                                                  |\r\n *                                                  |\r\n *                                                  | 4.BPeerConnection.createAnswer: got answerB\r\n *                                                  | BPeerConnection.setLocalDescription(answerB)\r\n *                                                  | <---- send answerB\r\n *                                                  | 5.got answerB <--- <--- <--- <---\r\n *                                                  | answerB = new RTCSessionDescription(answerB)\r\n *                                                  |\r\n * APeerConnection.setRemoteDescription(answerB)    |\r\n *                                                  |\r\n * 6.got candidateA ---> --->  ---> --->            | ---> got candidateA\r\n *                                                  | BPeerConnection.addIceCandidate(new RTCIceCandidate(candidateA))\r\n *                                                  |\r\n *                                                  |\r\n *                                                  | got candidateB <--- <--- <--- <---\r\n *                                                  | <--- 6.got candidateB APeerConnection.addIceCandidate(candidateB)\r\n *                                                  |\r\n *                                                  |\r\n *                                                  | 7. APeerConnection.addStream(streamA)\r\n *                                                  | 7.BPeerConnection.addStream(streamB)\r\n *                                                  |\r\n *                              streamA >>>>>>>>>>> |  <<<<< see A\r\n *                              seeB <<<<<<<<<<<    | <<<<< streamB\r\n *                                                  |\r\n *\r\n */\nvar _util = __webpack_require__(252);\nvar _logger = _util.logger;\n\nvar _WebrtcStatistics = {\n    bytesPrev: null,\n    timestampPrev: null,\n    sentBytesPrev: null,\n    sentTimestampPrev: null,\n\n    printStats: function printStats(rtcPeerConnection) {\n        var self = this;\n\n        rtcPeerConnection.getStats(null, function (results) {\n            self.parseRecvStatistics(results, function (name, value) {\n                _logger.info(new Date(), \"RECV \", name, value);\n            }, function (name, value) {\n                _logger.info(new Date(), \"SEND \", name, value);\n            });\n        });\n    },\n\n    stopIntervalPrintStats: function stopIntervalPrintStats() {\n        var self = this;\n\n        self._printIntervalId && window.clearInterval(self._printIntervalId);\n        self._printIntervalId = null;\n    },\n\n    intervalPrintStats: function intervalPrintStats(rtcPeerConnection, seconds) {},\n\n    _intervalPrintStats: function _intervalPrintStats(rtcPeerConnection, seconds) {\n        var self = this;\n\n        self._printIntervalId && window.clearInterval(self._printIntervalId);\n        self._printIntervalId = window.setInterval(function () {\n            self.printStats(rtcPeerConnection);\n        }, seconds * 1000);\n    },\n\n    parseRecvStatistics: function parseRecvStatistics(results, callback, callbackSent) {\n        var self = this;\n\n        // calculate video bitrate\n        var bitrate;\n        var remoteWidth;\n        var remoteHeight;\n\n        var activeCandidatePair = null;\n        var remoteCandidate = null;\n\n        Object.keys(results).forEach(function (result) {\n            var report = results[result];\n            var now = report.timestamp;\n\n            if (report.type === 'inboundrtp' && report.mediaType === 'audio') {\n                // firefox calculates the bitrate for us\n                // https://bugzilla.mozilla.org/show_bug.cgi?id=951496\n                bitrate = Math.floor(report.bitrateMean / 1024);\n            } else if (report.type === 'ssrc' && report.bytesReceived) {\n                if (report.mediaType === 'video') {\n                    // remoteWidth = report.googFrameWidthReceived;\n                    // remoteHeight = report.googFrameHeightReceived;\n                    // // chrome does not so we need to do it ourselves\n                    // var bytes = report.bytesReceived;\n                    // if (self.timestampPrev) {\n                    //     bitrate = 8 * (bytes - self.bytesPrev) / (now - self.timestampPrev);\n                    //     bitrate = Math.floor(bitrate);\n                    // }\n                    // self.bytesPrev = bytes;\n                    // self.timestampPrev = now;\n                } else {\n                    // chrome does not so we need to do it ourselves\n                    var bytes = report.bytesReceived;\n                    if (self.timestampPrev) {\n                        bitrate = 8 * (bytes - self.bytesPrev) / (now - self.timestampPrev);\n                        bitrate = Math.floor(bitrate);\n                    }\n                    self.bytesPrev = bytes;\n                    self.timestampPrev = now;\n                }\n            }\n\n            if (report.type === 'candidatepair' && report.selected || report.type === 'googCandidatePair' && report.googActiveConnection === 'true') {\n                activeCandidatePair = report;\n            }\n\n            if (report.type === 'outboundrtp' && report.mediaType === 'audio') {\n                callbackSent('audio Bitrate', Math.floor(report.bitrateMean / 1024) + ' kbps');\n            } else if (report.type === 'ssrc' && report.bytesSent && report.googFrameHeightSent) {\n                // chrome does not so we need to do it ourselves\n                var bytes = report.bytesSent;\n                if (self.sentTimestampPrev) {\n                    var br = 8 * (bytes - self.sentBytesPrev) / (now - self.sentTimestampPrev);\n                    br = Math.floor(br);\n                    callbackSent('audio Bitrate', br + ' kbps');\n                    callbackSent('audio Size', report.googFrameWidthSent + 'x' + report.googFrameHeightSent);\n                }\n                self.sentBytesPrev = bytes;\n                self.sentTimestampPrev = now;\n            }\n        });\n\n        if (activeCandidatePair && activeCandidatePair.remoteCandidateId) {\n            remoteCandidate = results[activeCandidatePair.remoteCandidateId];\n        }\n        if (remoteCandidate && remoteCandidate.ipAddress && remoteCandidate.portNumber) {\n            callback('Peer', remoteCandidate.ipAddress + ':' + remoteCandidate.portNumber);\n        }\n\n        callback('audio Bitrate', bitrate + ' kbps');\n\n        if (remoteHeight) {\n            callback('audio Size', remoteWidth + 'x' + remoteHeight);\n        }\n    }\n};\n\nvar WebrtcStatisticsHelper = function WebrtcStatisticsHelper(cfg) {\n    _util.extend(this, _WebrtcStatistics, cfg || {});\n};\n\nvar webrtcStatisticsHelper = new WebrtcStatisticsHelper();\n\nvar _SDPSection = {\n    headerSection: null,\n\n    audioSection: null,\n    videoSection: null,\n\n    _parseHeaderSection: function _parseHeaderSection(sdp) {\n        var index = sdp.indexOf('m=audio');\n        if (index >= 0) {\n            return sdp.slice(0, index);\n        }\n\n        index = sdp.indexOf('m=video');\n        if (index >= 0) {\n            return sdp.slice(0, index);\n        }\n\n        return sdp;\n    },\n\n    _parseAudioSection: function _parseAudioSection(sdp) {\n        var index = sdp.indexOf('m=audio');\n        if (index >= 0) {\n            var endIndex = sdp.indexOf('m=video');\n            return sdp.slice(index, endIndex < 0 ? sdp.length : endIndex);\n        }\n    },\n\n    _parseVideoSection: function _parseVideoSection(sdp) {\n        var index = sdp.indexOf('m=video');\n        if (index >= 0) {\n            return sdp.slice(index);\n        }\n    },\n\n    spiltSection: function spiltSection(sdp) {\n        var self = this;\n\n        self.headerSection = self._parseHeaderSection(sdp);\n        self.audioSection = self._parseAudioSection(sdp);\n        self.videoSection = self._parseVideoSection(sdp);\n    },\n\n    removeSSRC: function removeSSRC(section) {\n        var arr = [];\n\n        var _arr = section.split(/a=ssrc:[^\\n]+/g);\n        for (var i = 0; i < _arr.length; i++) {\n            _arr[i] != '\\n' && arr.push(_arr[i]);\n        }\n        // arr.push('');\n\n        return arr.join('\\n');\n    },\n\n    removeField_msid: function removeField_msid(section) {\n        var arr = [];\n\n        var _arr = section.split(/a=msid:[^\\n]+/g);\n        for (var i = 0; i < _arr.length; i++) {\n            _arr[i] != '\\n' && arr.push(_arr[i]);\n        }\n        // arr.push('');\n\n        section = arr.join('\\n');\n        arr = [];\n\n        _arr = section.split(/[\\n]+/g);\n        for (var i = 0; i < _arr.length; i++) {\n            _arr[i] != '\\n' && arr.push(_arr[i]);\n        }\n\n        return arr.join('\\n');\n    },\n\n    updateHeaderMsidSemantic: function updateHeaderMsidSemantic(wms) {\n\n        var self = this;\n\n        var line = \"a=msid-semantic: WMS \" + wms;\n\n        var _arr = self.headerSection.split(/a=msid\\-semantic: WMS.*/g);\n        var arr = [];\n        switch (_arr.length) {\n            case 1:\n                arr.push(_arr[0]);\n                break;\n            case 2:\n                arr.push(_arr[0]);\n                arr.push(line);\n                arr.push('\\n');\n                break;\n            case 3:\n                arr.push(_arr[0]);\n                arr.push(line);\n                arr.push('\\n');\n                arr.push(_arr[2]);\n                arr.push('\\n');\n                break;\n        }\n\n        return self.headerSection = arr.join('');\n    },\n\n    updateAudioSSRCSection: function updateAudioSSRCSection(ssrc, cname, msid, label) {\n        var self = this;\n\n        self.audioSection && (self.audioSection = self.removeSSRC(self.audioSection));\n        self.audioSection && (self.audioSection = self.removeField_msid(self.audioSection));\n        self.audioSection && (self.audioSection = self.audioSection + self.ssrcSection(ssrc, cname, msid, label));\n    },\n\n    updateVideoSSRCSection: function updateVideoSSRCSection(ssrc, cname, msid, label) {\n        var self = this;\n\n        self.videoSection && (self.videoSection = self.removeSSRC(self.videoSection));\n        self.videoSection && (self.videoSection = self.removeField_msid(self.videoSection));\n        self.videoSection && (self.videoSection = self.videoSection + self.ssrcSection(ssrc, cname, msid, label));\n    },\n\n    getUpdatedSDP: function getUpdatedSDP() {\n        var self = this;\n\n        var sdp = \"\";\n\n        self.headerSection && (sdp += self.headerSection);\n        self.audioSection && (sdp += self.audioSection);\n        self.videoSection && (sdp += self.videoSection);\n\n        return sdp;\n    },\n\n    parseMsidSemantic: function parseMsidSemantic(header) {\n        var self = this;\n\n        var regexp = /a=msid\\-semantic:\\s*WMS (\\S+)/ig;\n        var arr = self._parseLine(header, regexp);\n\n        arr && arr.length == 2 && (self.msidSemantic = {\n            line: arr[0],\n            WMS: arr[1]\n        });\n\n        return self.msidSemantic;\n    },\n\n    ssrcSection: function ssrcSection(ssrc, cname, msid, label) {\n        var lines = ['a=ssrc:' + ssrc + ' cname:' + cname, 'a=ssrc:' + ssrc + ' msid:' + msid + ' ' + label, 'a=ssrc:' + ssrc + ' mslabel:' + msid, 'a=ssrc:' + ssrc + ' label:' + label, ''];\n\n        return lines.join('\\n');\n    },\n\n    parseSSRC: function parseSSRC(section) {\n        var self = this;\n\n        var regexp = new RegExp(\"a=(ssrc):(\\\\d+) (\\\\S+):(\\\\S+)\", \"ig\");\n\n        var arr = self._parseLine(section, regexp);\n        if (arr) {\n            var ssrc = {\n                lines: [],\n                updateSSRCSection: self.ssrcSection\n            };\n\n            for (var i = 0; i < arr.length; i++) {\n                var e = arr[i];\n                if (e.indexOf(\"a=ssrc\") >= 0) {\n                    ssrc.lines.push(e);\n                } else {\n                    switch (e) {\n                        case 'ssrc':\n                        case 'cname':\n                        case 'msid':\n                        case 'mslabel':\n                        case 'label':\n                            ssrc[e] = arr[++i];\n                    }\n                }\n            }\n\n            return ssrc;\n        }\n    },\n\n    _parseLine: function _parseLine(str, regexp) {\n        var arr = [];\n\n        var _arr;\n        while ((_arr = regexp.exec(str)) != null) {\n            for (var i = 0; i < _arr.length; i++) {\n                arr.push(_arr[i]);\n            }\n        }\n\n        if (arr.length > 0) {\n            return arr;\n        }\n    }\n};\n\nvar SDPSection = function SDPSection(sdp) {\n    _util.extend(this, _SDPSection);\n    this.spiltSection(sdp);\n};\n\n/**\r\n * Abstract\r\n */\nvar _WebRTC = {\n    streamType: \"VIDEO\", // VIDEO or VOICE\n\n    mediaStreamConstaints: {\n        audio: true,\n        video: true\n    },\n\n    localStream: null,\n    rtcPeerConnection: null,\n\n    offerOptions: {\n        offerToReceiveAudio: 1,\n        offerToReceiveVideo: 1\n    },\n\n    createMedia: function createMedia(constaints, onGotStream) {\n        var self = this;\n\n        if (constaints && typeof constaints === \"function\") {\n            onGotStream = constaints;\n            constaints = null;\n        }\n\n        _logger.debug('[WebRTC-API] begin create media ......');\n\n        function gotStream(stream) {\n            _logger.debug('[WebRTC-API] got local stream');\n\n            self.localStream = stream;\n\n            var videoTracks = self.localStream.getVideoTracks();\n            var audioTracks = self.localStream.getAudioTracks();\n\n            if (videoTracks.length > 0) {\n                _logger.debug('[WebRTC-API] Using video device: ' + videoTracks[0].label);\n            }\n            if (audioTracks.length > 0) {\n                _logger.debug('[WebRTC-API] Using audio device: ' + audioTracks[0].label);\n            }\n\n            onGotStream ? onGotStream(self, stream, self.streamType) : self.onGotStream(stream, self.streamType);\n        }\n\n        return navigator.mediaDevices.getUserMedia(constaints || self.mediaStreamConstaints).then(gotStream).then(self.onCreateMedia).catch(function (e) {\n            _logger.debug('[WebRTC-API] getUserMedia() error: ', e);\n            self.onError(e);\n        });\n    },\n\n    setLocalVideoSrcObject: function setLocalVideoSrcObject(stream) {\n        this.onGotLocalStream(stream, this.streamType);\n        _logger.debug('[WebRTC-API] you can see yourself !');\n    },\n\n    createRtcPeerConnection: function createRtcPeerConnection(iceServerConfig) {\n        _logger.debug('[WebRTC-API] begin create RtcPeerConnection ......');\n\n        var self = this;\n\n        // if (iceServerConfig && iceServerConfig.iceServers) {\n        // } else {\n        //     iceServerConfig = null;\n        // }\n\n        if (iceServerConfig) {\n            //reduce icecandidate number:add default value\n            !iceServerConfig.iceServers && (iceServerConfig.iceServers = []);\n\n            iceServerConfig.rtcpMuxPolicy = \"require\";\n            iceServerConfig.bundlePolicy = \"max-bundle\";\n\n            //iceServerConfig.iceTransportPolicy = 'relay';\n            if (iceServerConfig.relayOnly) {\n                iceServerConfig.iceTransportPolicy = 'relay';\n            }\n        } else {\n            iceServerConfig = null;\n        }\n        _logger.debug('[WebRTC-API] RtcPeerConnection config:', iceServerConfig);\n\n        self.startTime = window.performance.now();\n\n        var rtcPeerConnection = self.rtcPeerConnection = new RTCPeerConnection(iceServerConfig);\n        _logger.debug('[WebRTC-API] Created local peer connection object', rtcPeerConnection);\n\n        rtcPeerConnection.onicecandidate = function (event) {\n            //reduce icecandidate number: don't deal with tcp, udp only\n            if (event.type == \"icecandidate\" && (event.candidate == null || / tcp /.test(event.candidate.candidate))) {\n                return;\n            }\n            self.onIceCandidate(event);\n        };\n\n        rtcPeerConnection.onicestatechange = function (event) {\n            self.onIceStateChange(event);\n        };\n\n        rtcPeerConnection.oniceconnectionstatechange = function (event) {\n            self.onIceStateChange(event);\n\n            if (\"connected\" == event.target.iceConnectionState) {\n                webrtcStatisticsHelper.intervalPrintStats(rtcPeerConnection, 1);\n            }\n\n            if (\"closed\" == event.target.iceConnectionState) {\n                webrtcStatisticsHelper.stopIntervalPrintStats();\n            }\n        };\n\n        rtcPeerConnection.onaddstream = function (event) {\n            self._onGotRemoteStream(event);\n        };\n    },\n\n    _uploadLocalStream: function _uploadLocalStream() {\n        this.rtcPeerConnection.addStream(this.localStream);\n        _logger.debug('[WebRTC-API] Added local stream to RtcPeerConnection');\n    },\n\n    createOffer: function createOffer(onCreateOfferSuccess, onCreateOfferError) {\n        var self = this;\n\n        self._uploadLocalStream();\n\n        _logger.debug('[WebRTC-API] createOffer start...');\n\n        return self.rtcPeerConnection.createOffer(self.offerOptions).then(function (desc) {\n            self.offerDescription = desc;\n\n            _logger.debug('[WebRTC-API] Offer '); //_logger.debug('from \\n' + desc.sdp);\n            _logger.debug('[WebRTC-API] setLocalDescription start');\n\n            self.rtcPeerConnection.setLocalDescription(desc).then(self.onSetLocalSessionDescriptionSuccess, self.onSetSessionDescriptionError).then(function () {\n                (onCreateOfferSuccess || self.onCreateOfferSuccess)(desc);\n            });\n        }, onCreateOfferError || self.onCreateSessionDescriptionError);\n    },\n\n    createPRAnswer: function createPRAnswer(onCreatePRAnswerSuccess, onCreatePRAnswerError) {\n        var self = this;\n\n        _logger.info(' createPRAnswer start');\n        // Since the 'remote' side has no media stream we need\n        // to pass in the right constraints in order for it to\n        // accept the incoming offer of audio and video.\n        return self.rtcPeerConnection.createAnswer().then(function (desc) {\n            _logger.debug('[WebRTC-API] _____________PRAnswer ', desc.sdp); //_logger.debug('from :\\n' + desc.sdp);\n\n            desc.type = \"pranswer\";\n            desc.sdp = desc.sdp.replace(/a=recvonly/g, 'a=inactive');\n\n            self.prAnswerDescription = desc;\n\n            _logger.debug('[WebRTC-API] inactive PRAnswer ', desc.sdp); //_logger.debug('from :\\n' + desc.sdp);\n            _logger.debug('[WebRTC-API] setLocalDescription start');\n\n            self.rtcPeerConnection.setLocalDescription(desc).then(self.onSetLocalSuccess, self.onSetSessionDescriptionError).then(function () {\n                var sdpSection = new SDPSection(desc.sdp);\n                sdpSection.updateHeaderMsidSemantic(\"MS_0000\");\n                sdpSection.updateAudioSSRCSection(1000, \"CHROME0000\", \"MS_0000\", \"LABEL_AUDIO_1000\");\n                sdpSection.updateVideoSSRCSection(2000, \"CHROME0000\", \"MS_0000\", \"LABEL_VIDEO_2000\");\n\n                desc.sdp = sdpSection.getUpdatedSDP();\n\n                _logger.debug('[WebRTC-API] Send PRAnswer ', desc.sdp); //_logger.debug('from :\\n' + desc.sdp);\n\n                (onCreatePRAnswerSuccess || self.onCreatePRAnswerSuccess)(desc);\n            });\n        }, onCreatePRAnswerError || self.onCreateSessionDescriptionError);\n    },\n\n    createAnswer: function createAnswer(onCreateAnswerSuccess, onCreateAnswerError) {\n        var self = this;\n\n        self._uploadLocalStream();\n\n        _logger.info('[WebRTC-API] createAnswer start');\n        // Since the 'remote' side has no media stream we need\n        // to pass in the right constraints in order for it to\n        // accept the incoming offer of audio and video.\n        return self.rtcPeerConnection.createAnswer().then(function (desc) {\n            _logger.debug('[WebRTC-API] _____________________Answer ', desc.sdp); //_logger.debug('from :\\n' + desc.sdp);\n\n            desc.type = 'answer';\n\n            if (WebIM.WebRTC.supportPRAnswer) {\n                var sdpSection = new SDPSection(desc.sdp);\n                var ms = sdpSection.parseMsidSemantic(sdpSection.headerSection);\n                if (ms.WMS == '*') {\n                    sdpSection.updateHeaderMsidSemantic(ms.WMS = \"MS_0000\");\n                }\n                var audioSSRC = sdpSection.parseSSRC(sdpSection.audioSection);\n                var videoSSRC = sdpSection.parseSSRC(sdpSection.videoSection);\n\n                sdpSection.updateAudioSSRCSection(1000, \"CHROME0000\", ms.WMS, audioSSRC.label || \"LABEL_AUDIO_1000\");\n                if (videoSSRC) {\n                    sdpSection.updateVideoSSRCSection(2000, \"CHROME0000\", ms.WMS, videoSSRC.label || \"LABEL_VIDEO_2000\");\n                }\n                // mslabel cname\n\n                desc.sdp = sdpSection.getUpdatedSDP();\n            }\n\n            self.answerDescription = desc;\n\n            _logger.debug('[WebRTC-API] Answer ', desc.sdp); //_logger.debug('from :\\n' + desc.sdp);\n            _logger.debug('[WebRTC-API] setLocalDescription start');\n\n            self.rtcPeerConnection.setLocalDescription(desc).then(self.onSetLocalSuccess, self.onSetSessionDescriptionError).then(function () {\n                if (WebIM.WebRTC.supportPRAnswer) {\n                    var sdpSection = new SDPSection(desc.sdp);\n\n                    sdpSection.updateHeaderMsidSemantic(\"MS_0000\");\n                    sdpSection.updateAudioSSRCSection(1000, \"CHROME0000\", \"MS_0000\", \"LABEL_AUDIO_1000\");\n                    sdpSection.updateVideoSSRCSection(2000, \"CHROME0000\", \"MS_0000\", \"LABEL_VIDEO_2000\");\n\n                    desc.sdp = sdpSection.getUpdatedSDP();\n                }\n\n                _logger.debug('[WebRTC-API] Send Answer ', desc.sdp); //_logger.debug('from :\\n' + desc.sdp);\n\n                (onCreateAnswerSuccess || self.onCreateAnswerSuccess)(desc);\n            });\n        }, onCreateAnswerError || self.onCreateSessionDescriptionError);\n    },\n\n    close: function close() {\n        var self = this;\n        try {\n            webrtcStatisticsHelper.stopIntervalPrintStats();\n\n            self.rtcPeerConnection && self.rtcPeerConnection.close();\n        } catch (e) {}\n\n        if (self.localStream) {\n            self.localStream.getTracks().forEach(function (track) {\n                track.stop();\n            });\n        }\n        self.localStream = null;\n    },\n\n    addIceCandidate: function addIceCandidate(candidate) {\n        var self = this;\n\n        if (!self.rtcPeerConnection) {\n            return;\n        }\n\n        _logger.debug('[WebRTC-API] Add ICE candidate: \\n', candidate);\n\n        var _cands = _util.isArray(candidate) ? candidate : [];\n        !_util.isArray(candidate) && _cands.push(candidate);\n\n        for (var i = 0; i < _cands.length; i++) {\n            candidate = _cands[i];\n\n            self.rtcPeerConnection.addIceCandidate(new RTCIceCandidate(candidate)).then(self.onAddIceCandidateSuccess, self.onAddIceCandidateError);\n        }\n    },\n\n    setRemoteDescription: function setRemoteDescription(desc) {\n        var self = this;\n\n        _logger.debug('[WebRTC-API] setRemoteDescription start. ');\n\n        desc.sdp = desc.sdp.replace(/UDP\\/TLS\\/RTP\\/SAVPF/g, \"RTP/SAVPF\");\n        _logger.debug('[WebRTC-API] setRemoteDescription.', desc);\n\n        desc = new RTCSessionDescription(desc);\n\n        return self.rtcPeerConnection.setRemoteDescription(desc).then(self.onSetRemoteSuccess, self.onSetSessionDescriptionError);\n    },\n\n    iceConnectionState: function iceConnectionState() {\n        var self = this;\n\n        return self.rtcPeerConnection.iceConnectionState;\n    },\n\n    onCreateMedia: function onCreateMedia() {\n        _logger.debug('[WebRTC-API] media created.');\n    },\n\n    _onGotRemoteStream: function _onGotRemoteStream(event) {\n        _logger.debug('[WebRTC-API] onGotRemoteStream.', event);\n\n        event.stream.getAudioTracks()[0].enabled = true;\n        event.stream.getVideoTracks()[0] && (event.stream.getVideoTracks()[0].enabled = this.streamType == \"VIDEO\");\n\n        this.onGotRemoteStream(event.stream, this.streamType);\n        _logger.debug('[WebRTC-API] received remote stream, you will see the other.');\n    },\n\n    onGotStream: function onGotStream(stream, streamType) {\n        _logger.debug('[WebRTC-API] on got a local stream : ' + streamType);\n    },\n\n    onSetRemoteSuccess: function onSetRemoteSuccess() {\n        _logger.info('[WebRTC-API] onSetRemoteSuccess complete');\n    },\n\n    onSetLocalSuccess: function onSetLocalSuccess() {\n        _logger.info('[WebRTC-API] setLocalDescription complete');\n    },\n\n    onAddIceCandidateSuccess: function onAddIceCandidateSuccess() {\n        _logger.debug('[WebRTC-API] addIceCandidate success');\n    },\n\n    onAddIceCandidateError: function onAddIceCandidateError(error) {\n        _logger.debug('[WebRTC-API] failed to add ICE Candidate: ' + error.toString());\n    },\n\n    onIceCandidate: function onIceCandidate(event) {\n        _logger.debug('[WebRTC-API] onIceCandidate : ICE candidate: \\n' + event.candidate);\n    },\n\n    onIceStateChange: function onIceStateChange(event) {\n        _logger.debug('[WebRTC-API] onIceStateChange : ICE state change event: ', event);\n    },\n\n    onCreateSessionDescriptionError: function onCreateSessionDescriptionError(error) {\n        _logger.error('[WebRTC-API] Failed to create session description: ' + error.toString());\n    },\n\n    onCreateOfferSuccess: function onCreateOfferSuccess(desc) {\n        _logger.debug('[WebRTC-API] create offer success');\n    },\n\n    onCreatePRAnswerSuccess: function onCreatePRAnswerSuccess(desc) {\n        _logger.debug('[WebRTC-API] create answer success');\n    },\n\n    onCreateAnswerSuccess: function onCreateAnswerSuccess(desc) {\n        _logger.debug('[WebRTC-API] create answer success');\n    },\n\n    onSetSessionDescriptionError: function onSetSessionDescriptionError(error) {\n        _logger.error('[WebRTC-API] onSetSessionDescriptionError : Failed to set session description: ' + error.toString());\n    },\n\n    onSetLocalSessionDescriptionSuccess: function onSetLocalSessionDescriptionSuccess() {\n        _logger.debug('[WebRTC-API] onSetLocalSessionDescriptionSuccess : setLocalDescription complete');\n    }\n\n};\n\nmodule.exports = function (initConfigs) {\n    _util.extend(true, this, _WebRTC, initConfigs || {});\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 257:
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\n/**\r\n * P2P\r\n */\nvar _util = __webpack_require__(252);\nvar RouteTo = __webpack_require__(255).RouteTo;\nvar _logger = _util.logger;\n\nvar P2PRouteTo = RouteTo({\n    success: function success(result) {\n        _logger.debug(\"iq to server success\", result);\n    },\n    fail: function fail(error) {\n        _logger.debug(\"iq to server error\", error);\n    }\n});\n\nvar CommonPattern = {\n    _pingIntervalId: null,\n    _p2pConfig: null,\n    _rtcCfg: null,\n    _rtcCfg2: null,\n    _rtKey: null,\n    _rtFlag: null,\n\n    webRtc: null,\n    api: null,\n\n    callee: null,\n\n    isCaller: false,\n    accepted: false,\n\n    setLocalSDP: false,\n    setRemoteSDP: false,\n\n    hangup: false,\n\n    init: function init() {\n        var self = this;\n\n        self.api.onPing = function () {\n            self._onPing.apply(self, arguments);\n        };\n        self.api.onTcklC = function () {\n            self._onTcklC.apply(self, arguments);\n        };\n        self.api.onAcptC = function () {\n            self._onAcptC.apply(self, arguments);\n        };\n        self.api.onAnsC = function () {\n            self._onAnsC.apply(self, arguments);\n        };\n        self.api.onTermC = function () {\n            self._onTermC.apply(self, arguments);\n        };\n        self.api.onEvJoin = function () {\n            self._onEvJoin.apply(self, arguments);\n        };\n        self.api.onStreamControl = function () {\n            self._onStreamControl.apply(self, arguments);\n        };\n        self.webRtc.onIceCandidate = function () {\n            self._onIceCandidate.apply(self, arguments);\n        };\n        self.webRtc.onIceStateChange = function () {\n            self._onIceStateChange.apply(self, arguments);\n        };\n    },\n\n    _ping: function _ping() {\n        var self = this;\n\n        var index = 0;\n\n        function ping() {\n            var rt = new P2PRouteTo({\n                to: self.callee,\n                rtKey: self._rtKey\n            });\n\n            self.api.ping(rt, self._sessId, function (from, rtcOptions) {\n                _logger.debug(\"ping result\", rtcOptions);\n            });\n            // self.api.streamControl(rt, self._sessId, \"rtcId\", (index++) % 4, function (from, rtcOptions) {\n            //     _logger.debug(\"streamControl result\", rtcOptions);\n            //\n            // });\n        }\n\n        self._pingIntervalId = window.setInterval(ping, 50000);\n    },\n\n    _onPing: function _onPing(from, options, rtkey, tsxId, fromSid) {\n        _logger.debug('_onPing from', fromSid);\n    },\n\n    initC: function initC(mediaStreamConstaints, accessSid) {\n        var self = this;\n        self.sid = accessSid;\n\n        self.isCaller = true;\n        self.accepted = false;\n        self.setLocalSDP = false;\n        self.setRemoteSDP = false;\n        self.hangup = false;\n\n        self.streamType = mediaStreamConstaints.audio && mediaStreamConstaints.video ? \"VIDEO\" : \"VOICE\";\n\n        self.createLocalMedia(mediaStreamConstaints);\n    },\n\n    createLocalMedia: function createLocalMedia(mediaStreamConstaints) {\n        var self = this;\n\n        this.webRtc.createMedia(mediaStreamConstaints, function (webrtc, stream) {\n            webrtc.setLocalVideoSrcObject(stream);\n\n            self.webRtc.createRtcPeerConnection(self._rtcCfg);\n\n            self.webRtc.createOffer(function (offer) {\n                self._onGotWebRtcOffer(offer);\n            });\n        });\n    },\n\n    _onGotWebRtcOffer: function _onGotWebRtcOffer(offer) {\n        var self = this;\n\n        var rt = new P2PRouteTo({\n            sid: self.sid,\n            to: self.callee,\n            rtKey: self._rtKey\n        });\n\n        self.api.initC(rt, self.streamType, null, null, self._sessId, self._rtcId, null, null, offer, null, self._rtcCfg2, null, function (from, rtcOptions) {\n            _logger.debug(\"initc result\", rtcOptions);\n        });\n\n        self.setLocalSDP = true;\n\n        self._ping();\n    },\n\n    _onAcptC: function _onAcptC(from, options) {\n        var self = this;\n\n        if (options.ans && options.ans == 1) {\n            _logger.info(\"[WebRTC-API] _onAcptC : 104, ans = 1, it is a answer. will onAcceptCall\");\n            self.onAcceptCall(from, options, options.enableVoice !== false, options.enableVideo !== false);\n            self._onAnsC(from, options);\n        } else if (!WebIM.WebRTC.supportPRAnswer) {\n            _logger.info(\"[WebRTC-API] _onAcptC : not supported pranswer. drop it. will onAcceptCall\");\n\n            self.setRemoteSDP = false;\n            self._handRecvCandsOrSend(from, options);\n\n            self.onAcceptCall(from, options, options.enableVoice !== false, options.enableVideo !== false);\n        } else {\n            _logger.info(\"[WebRTC-API] _onAcptC : recv pranswer. \");\n\n            if (options.sdp || options.cands) {\n                // options.sdp && (options.sdp.type = \"pranswer\");\n                options.sdp && self.webRtc.setRemoteDescription(options.sdp);\n\n                self.setRemoteSDP = true;\n                self._handRecvCandsOrSend(from, options);\n\n                self.onAcceptCall(from, options, options.enableVoice !== false, options.enableVideo !== false);\n            }\n        }\n    },\n\n    _onEvJoin: function _onEvJoin(from, options, rtkey, tsxId, fromSid) {\n        var self = this;\n\n        _logger.debug('_onEvJoin from', fromSid, from);\n\n        self.onAcceptCall(from, options, options.enableVoice !== false, options.enableVideo !== false);\n    },\n\n    onAcceptCall: function onAcceptCall(from, options, enableVoice, enableVideo) {},\n\n    __onVoiceOrVideo: function __onVoiceOrVideo(from, options, fromSid) {\n        var self = this;\n\n        options.enableVoice === false ? self.onOtherUserOpenVoice(from, false) : self.onOtherUserOpenVoice(from, true);\n        options.enableVideo === false ? self.onOtherUserOpenVideo(from, false) : self.onOtherUserOpenVideo(from, true);\n    },\n\n    /*\r\n     * { verison : MSYNC_V1, compress_algorimth : 0, command : SYNC, payload : { meta : { id : 2326, to : easemob-demo#chatdemoui_xyj002@easemob.com, ns : CONFERENCE, payload : { session_id : xyj0011494320598055, operation : MEDIA_REQUEST, peer_name : xyj001, route_flag : 1, route_key : --X--, content : {\"op\":400,\"callVersion\":\"2.0.0\",\"sessId\":\"128542826909667328\",\"rtcId\":\"Channel1494320598056\",\"tsxId\":\"1494320622866-6\",\"controlType\":0}, control_type : PAUSE_VOICE } } } }\r\n     * PAUSE_VOICE(0, 0), RESUME_VOICE(1, 1), PAUSE_VIDEO(2, 2), RESUME_VIDEO(3, 3)\r\n     *\r\n     */\n    _onStreamControl: function _onStreamControl(from, options, rtkey, tsxId, fromSid) {\n        var self = this;\n        var controlType = options.controlType;\n\n        controlType === 0 && self.onOtherUserOpenVoice(from, false);\n        controlType === 1 && self.onOtherUserOpenVoice(from, true);\n        controlType === 2 && self.onOtherUserOpenVideo(from, false);\n        controlType === 3 && self.onOtherUserOpenVideo(from, true);\n\n        self.onStreamControl(from, options, rtkey, tsxId, fromSid);\n    },\n    onStreamControl: function onStreamControl(from, options, rtkey, tsxId, fromSid) {},\n\n    onOtherUserOpenVoice: function onOtherUserOpenVoice(from, opened) {\n        _logger.debug(\"from open:\", opened, \" voice .\", from);\n    },\n    onOtherUserOpenVideo: function onOtherUserOpenVideo(from, opened) {\n        _logger.debug(\"from open:\", opened, \" voideo .\", from);\n    },\n\n    _onAnsC: function _onAnsC(from, options) {\n        // answer\n        var self = this;\n\n        _logger.info(\"[WebRTC-API] _onAnsC : recv answer. \");\n\n        self.accepted = true;\n\n        options.sdp && self.webRtc.setRemoteDescription(options.sdp);\n\n        self.setRemoteSDP = true;\n        self._handRecvCandsOrSend(from, options);\n\n        self.__onVoiceOrVideo(from, options);\n    },\n\n    _onInitC: function _onInitC(from, options, rtkey, tsxId, fromSid) {\n        var self = this;\n\n        self.isCaller = false;\n        self.accepted = false;\n        self.setLocalSDP = false;\n        self.setRemoteSDP = false;\n        self.hangup = false;\n\n        self.callee = from;\n        self._rtcCfg2 = options.rtcCfg;\n        self._rtKey = rtkey;\n        self._tsxId = tsxId;\n        self._fromSid = fromSid;\n\n        self._rtcId = options.rtcId;\n        self._sessId = options.sessId;\n\n        self.streamType = options.streamType;\n\n        self.webRtc.createRtcPeerConnection(self._rtcCfg2);\n\n        options.sdp && _logger.debug(options.sdp.sdp);\n\n        options.sdp && self.webRtc.setRemoteDescription(options.sdp).then(function () {\n\n            self.setRemoteSDP = true;\n            self._handRecvCandsOrSend(from, options);\n\n            /*\r\n             * chrome 版本 大于 50时，可以使用pranswer。\r\n             * 小于50 不支持pranswer，此时处理逻辑是，直接进入振铃状态\r\n             *\r\n             */\n            if (WebIM.WebRTC.supportPRAnswer) {\n                self.webRtc.createPRAnswer(function (prAnswer) {\n                    self._onGotWebRtcPRAnswer(prAnswer);\n\n                    setTimeout(function () {\n                        //由于 chrome 在 pranswer时，ice状态只是 checking，并不能像sdk那样 期待 connected 振铃；所以目前改为 发送完pranswer后，直接振铃\n                        _logger.info(\"[WebRTC-API] onRinging : after send pranswer. \", self.callee);\n                        self.onRinging(self.callee, self.streamType);\n                    }, 500);\n                });\n            } else {\n                setTimeout(function () {\n                    _logger.info(\"[WebRTC-API] onRinging : After iniC, cause by: not supported pranswer. \", self.callee);\n                    self.onRinging(self.callee, self.streamType);\n                }, 500);\n                self._ping();\n            }\n        });\n    },\n\n    _onGotWebRtcPRAnswer: function _onGotWebRtcPRAnswer(prAnswer) {\n        var self = this;\n\n        var rt = new P2PRouteTo({\n            //tsxId: self._tsxId,\n            to: self.callee,\n            rtKey: self._rtKey\n        });\n\n        //self.api.acptC(rt, self._sessId, self._rtcId, prAnswer, null, 1);\n        self.api.acptC(rt, self._sessId, self._rtcId, prAnswer);\n\n        self.setLocalSDP = true;\n        self._handRecvCandsOrSend();\n\n        self._ping();\n    },\n\n    onRinging: function onRinging(caller, streamType) {},\n\n    accept: function accept() {\n        var self = this;\n\n        function createAndSendAnswer() {\n            _logger.info(\"createAndSendAnswer : ...... \");\n\n            self.webRtc.createAnswer(function (answer) {\n                var rt = new P2PRouteTo({\n                    //tsxId: self._tsxId,\n                    to: self.callee,\n                    rtKey: self._rtKey\n                });\n\n                if (WebIM.WebRTC.supportPRAnswer) {\n                    self.api.ansC(rt, self._sessId, self._rtcId, answer);\n                } else {\n                    self.api.acptC(rt, self._sessId, self._rtcId, answer, null, 1);\n                }\n\n                if (!WebIM.WebRTC.supportPRAnswer) {\n                    self.setLocalSDP = true;\n                }\n                self._handRecvCandsOrSend();\n\n                self.accepted = true;\n            });\n        }\n\n        var constaints = {\n            audio: true\n        };\n        if (self.streamType == \"VIDEO\") {\n            constaints.video = true;\n        }\n\n        self.webRtc.createMedia(constaints, function (webrtc, stream) {\n            webrtc.setLocalVideoSrcObject(stream);\n\n            createAndSendAnswer();\n        });\n    },\n\n    _handRecvCandsOrSend: function _handRecvCandsOrSend(from, options) {\n        var self = this;\n\n        setTimeout(function () {\n            self._onTcklC(from, options);\n        }, 50);\n\n        setTimeout(function () {\n            self._onIceCandidate();\n        }, 50);\n    },\n\n    _onTcklC: function _onTcklC(from, options) {\n        // setRemoteSDP，才可以添加 添加 对方 cands\n        var self = this;\n\n        // options.sdp && self.webRtc.setRemoteDescription(options.sdp);\n\n        if (self.setRemoteSDP) {\n            _logger.info(\"[WebRTC-API] recv and add cands.\");\n\n            self._recvCands && self._recvCands.length > 0 && self.webRtc.addIceCandidate(self._recvCands);\n            self._recvCands && self._recvCands.length > 0 && (self._recvCands = []);\n            options && options.cands && self.webRtc.addIceCandidate(options.cands);\n        } else if (options && options.cands && options.cands.length > 0) {\n            for (var i = 0; i < options.cands.length; i++) {\n                (self._recvCands || (self._recvCands = [])).push(options.cands[i]);\n            }\n            _logger.debug(\"[_onTcklC] temporary memory[recv] ice candidate. util setRemoteSDP = true\");\n        }\n    },\n\n    _onIceStateChange: function _onIceStateChange(event) {\n        var self = this;\n        event && _logger.debug(\"[WebRTC-API] \" + self.webRtc.iceConnectionState() + \" |||| ice state is \" + event.target.iceConnectionState);\n\n        if (event && event.target.iceConnectionState == \"closed\") {\n            self.setLocalSDP = false;\n            self.setRemoteSDP = false;\n        }\n\n        self.api.onIceConnectionStateChange(self.webRtc.iceConnectionState());\n    },\n\n    _onIceCandidate: function _onIceCandidate(event) {\n        //在本地sdp set 发送完成后，发送 cands\n        var self = this;\n\n        if (self.setLocalSDP) {\n            var sendIceCandidate = function sendIceCandidate(candidate) {\n                _logger.debug(\"send ice candidate...\");\n\n                var rt = new P2PRouteTo({\n                    to: self.callee,\n                    rtKey: self._rtKey\n                });\n\n                if (candidate) {\n                    self.api.tcklC(rt, self._sessId, self._rtcId, null, candidate);\n                }\n            };\n\n            if (self._cands && self._cands.length > 0) {\n\n                sendIceCandidate(self._cands);\n\n                self._cands = [];\n            }\n            event && event.candidate && sendIceCandidate(event.candidate);\n        } else {\n            event && event.candidate && (self._cands || (self._cands = [])).push(event.candidate);\n            _logger.debug(\"[_onIceCandidate] temporary memory[send] ice candidate. util setLocalSDP = true\");\n        }\n    },\n\n    termCall: function termCall(reason) {\n        var self = this;\n\n        self._pingIntervalId && window.clearInterval(self._pingIntervalId);\n\n        var rt = new P2PRouteTo({\n            to: self.callee,\n            rtKey: self._rtKey\n        });\n\n        var sendReason;\n        reason || !self.isCaller && !self.accepted && (sendReason = 'decline') || (sendReason = 'success');\n\n        self.hangup || self.api.termC(rt, self._sessId, self._rtcId, sendReason);\n\n        self.webRtc.close();\n\n        self.hangup = true;\n\n        self.setLocalSDP = false;\n        self.setRemoteSDP = false;\n\n        self.onTermCall(reason);\n    },\n\n    /**\r\n     *\r\n     * @param from\r\n     * @param options\r\n     * @param options.reason\r\n     *               \"ok\"      -> 'HANGUP'     \"success\" -> 'HANGUP'   \"timeout\"          -> 'NORESPONSE'\r\n     *               \"decline\" -> 'REJECT'     \"busy\"    -> 'BUSY'     \"failed-transport\" -> 'FAIL'\r\n     * @private\r\n     */\n    _onTermC: function _onTermC(from, options) {\n        _logger.debug(\"[_onTermC] options.reason = \" + options.reason);\n\n        var self = this;\n\n        self.hangup = true;\n\n        self.setLocalSDP = false;\n        self.setRemoteSDP = false;\n\n        self.termCall(options.reason);\n    },\n\n    onTermCall: function onTermCall() {\n        //to be overwrited by call.listener.onTermCall\n    }\n};\n\nmodule.exports = function (initConfigs) {\n    var self = this;\n\n    _util.extend(true, this, CommonPattern, initConfigs || {});\n\n    self.init();\n};\n\n/**\r\n * TODO: Conference\r\n */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ })

/******/ });