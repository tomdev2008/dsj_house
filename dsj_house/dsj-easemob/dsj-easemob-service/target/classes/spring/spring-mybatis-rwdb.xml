<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
   
    <!-- db数据源 -->
   	<import resource="classpath:spring/spring-datasources.xml"/>
	
    <!-- 将数据源映射到sqlSessionFactory中  MyBatis-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.dsj"/>
        <property name="mapperLocations" value="classpath:com/dsj/modules/*/mapper/*.xml"/>
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
    </bean>
    
    <!-- SqlSession模板类实例 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" >
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<!-- 动态SqlSession模板类代理 -->
	<bean id="sessionTemplate" class="com.dsj.common.core.datasource.DynamicSqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionTemplate" />
	</bean>
    
    <!-- 读/写动态选择数据库实现 readWriteDataSource -->
	<bean id="dataSource" class="com.dsj.common.core.datasource.DynamicDataSource">
        <property name="master" ref="writeDataSource"/>
        <property name="slaves">
       		<list>
				<ref bean="readDataSource1"/>
			</list>		
        </property>
    </bean>

	<!--======= 事务配置 Begin ================= -->
	<!-- 事务管理器（由Spring管理MyBatis的事务） -->
	<bean id="transactionManager" class="com.dsj.common.core.datasource.DynamicDataSourceTransactionManager">
		<!-- 关联数据源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 配置事务的传播特性  -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="create*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="edit*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="persist*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="merge*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="set*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="do*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="batch*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="init*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="*" read-only="true"/>		
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置事务切面 -->
	<aop:config proxy-target-class="true">
	  	<!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* com.dsj.modules.*.service.impl.*ServiceImpl.*(..))" />
        <aop:advisor pointcut="execution(* com.dsj.common.core.service.BaseServiceImpl.*(..))" advice-ref="txAdvice" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
	<!--======= 事务配置 End =================== -->
	
	

</beans>